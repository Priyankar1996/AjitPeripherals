// Register Addresses
$parameter BlockSize 4
$parameter BlockCount 6
$parameter Argument 8
$parameter Transfer 12
$parameter Command 14
$parameter Response0 16
$parameter Response2 20
$parameter Response4 24
$parameter Response6 28
$parameter BufferDataPort 32
$parameter PresentState 36
$parameter HostControl 40
$parameter PowerControl 41
$parameter BlockGapControl 42
$parameter ClockControl 44
$parameter TimeoutControl 46
$parameter SoftwareReset 47
$parameter NormalInterruptStatus 48
$parameter ErrorInterruptStatus 50
$parameter NormalInterruptStatusEnable 52
$parameter ErrorInterruptStatusEnable 54
$parameter NormalInterruptSignalEnable 56
$parameter ErrorInterruptSignalEnable 58
$parameter AutoCmdError 60
$parameter HostControl2 62
$parameter Capabilities 64
$parameter MaxCurrentCapabilities 72
$parameter PresetValue 96
$parameter HostControllerVersion 254

// Register set size
$parameter REGISTERSETSIZE 256

//useful constants
$constant ZERO_8: $uint<8> := 0
$constant ZERO_16: $uint<16> := 0
$constant ZERO_32: $uint<32> := 0
$constant ZERO_1: $uint<1> := 0
$constant ONE_1: $uint<1>:= 1
$constant ZERO_2: $uint<2> := 0
$constant ONE_2: $uint<2>:= 1
$constant ONE_8: $uint<8>:= 1
$constant CRC_CONST: $uint<8>:= _h89
$constant CRC16_CONST: $uint<16>:= _h1020

// Registers are byte addressable
// Therefore an array of size 256 
// Each of 8-bits
$storage sdhcRegisters: $array [REGISTERSETSIZE] $of $uint<8>

//Some Global Flags which are required
$storage normalInterruptFlag1:$uint<8>
$storage normalInterruptFlag2:$uint<8>
$storage errorInterruptFlag1:$uint<8>
$storage errorInterruptFlag2:$uint<8>
$storage txBufferPointer:$uint<10>
$storage rxBufferPointer:$uint<10>
$storage dataRxEnrty:$uint<1>
$storage dataRxEnrty1:$uint<1>
$storage dataRxEnrty2:$uint<1>
$storage dataErrorInterruptStatus:$uint<8>


//peripheral bridge to sdhc request pipe
$pipe peripheral_bridge_to_sdhc_request :$uint<64> $depth 1

//sdhc to peripheral bridge response pipe
$pipe sdhc_to_peripheral_bridge_response :$uint<32> $depth 1 

// Data buffer inside the host controller for writing into sd card of size 512 bytes
$pipe dataBufferTx :$uint<8> $depth 512
// Data buffer inside the host controller for reading from sd card of size 512 bytes
$pipe dataBufferRx :$uint<8> $depth 512


//Pipe for sending Command 
$pipe commandTx :$uint<1> $depth 4
//Pipe for recieving response 
$pipe responseRx :$uint<8> $depth 4

//A dummy pipe----will not be used
$pipe dummy :$uint<1> $depth 1

//Pipe for sending Data
$pipe DAT0Tx :$uint<1> $depth 1024
//Pipe for recieving Data 
$pipe DAT0Rx :$uint<8> $depth 1024
//Pipe for sending Data
$pipe DAT1Tx :$uint<1> $depth 1024
//Pipe for recieving Data 
$pipe DAT1Rx :$uint<8> $depth 1024
//Pipe for sending Data
$pipe DAT2Tx :$uint<1> $depth 1024
//Pipe for recieving Data 
$pipe DAT2Rx :$uint<8> $depth 1024
//Pipe for sending Data
$pipe DAT3Tx :$uint<1> $depth 1024
//Pipe for recieving Data 
$pipe DAT3Rx :$uint<8> $depth 1024

//Interrupt signal
$pipe SDHC_to_IRC_INT:$uint<1> $out $signal